input:  bytearray, string, file, pipe, join_multi_input, filter,
output: byte, file, pipe, filter, 


rational algebra.
cartesian product. 

pip3.5 install pymongo -i https://pypi.tuna.tsinghua.edu.cn/simple/


aws configure list 
aws configure --profile dyrs

[default]
aws_access_key_id = AKIAPK4G46KQYCP5PHJA 
aws_secret_access_key = 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
[dyrs]
aws_access_key_id = AKIAOBR64VKOCDP4TWPA
aws_secret_access_key = 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
output = json
region = cn-north-1


aws --profile dyrs s3 ls s3://data.dyrs-lbadvsior.com/credentials/secret_keys/




Most of the answers on the this one are from around 2014, so I thought of adding some fresh perspective. To set the context right, it’s 2017, so I’m assuming, when you say developing a web application you’re talking about developing a REST backend. Your front-end will most likely(if not then you’re doing something seriously wrong) be React or Angular. So the question boils down to which language should be a better choice to develop REST endpoints.

Now we’re talking….

The answer is Python.

So why not Java. Well though Java has some micro frameworks, it’s more likely that an enterprise will choose the safer route with Spring. While Spring brings more and more to the table with every successive iterations it’s increasingly snowballing into a giant blob of layers of wrapper around core functionalities. Spring is awesome when things go right, but when they don’t, well…..

Java build cycles using Jenkins take longer and their deployment on Docker containers take even longer, assuming you’ve a continuous integration pipeline set up(you don’t….like seriously!!!)

It gets worse, integrating your data science pipeline on a Java stack is a nightmare. You could get around that problem using Scala which is power packed with a whole bunch of ML libraries and toolsets, and runs on the jvm, but that still isn’t clean and elegant.

Java is verbose, sprint cycles even in large enterprises today demand faster production cycles, not an easy task at all.

Bottomline, Java’s is too much of an excess baggage for 2017.

Enter Python….drum roll…….

Choose between Falcon, Flask or Bottle.. they’re all minimalistic frameworks and does just what you want them to do. Ofcourse you could use Django or rather jump off the roof….Django’s as useless as Ruby on Rails.

Integrating with the data science pipeline, well Pandas and SciKit learn are industry leaders. Faster build cycles, faster deployments, faster everything….

Still not sold, well Python lends itself much easier to functional programming over OOP, which is a visible direction the industry is slowly moving towards.

One small caveat, don’t for a moment think Python is simpler than Java, it’s not. Never was.


spring 问题:
spring 怎么知道建立那个bean.
spring 如何把bean串起来.
spring 如何查找bean.
建立是通过注解. 
@repository @component. @ service.

@repository implement dataservice
@service implement businessservice


@autowired 用来串连bean.
bean container:
1.bean factory
2. application context.



application context:
1.java apllication configuration
2. xml configuration.


@configuration
告诉是个java configuration
@componentscan(back_packages="address)
告诉在那找这个bean.



configuration 和 xml是告诉JAVA怎么启动spring.
container managed beans:



dependency injection types:
1. the setter injection
2. constuctor injection

解藕可能会成为伪命题.


当多个可以注入的时候, 还得手动做分类. 
@primary
注入分类
@qualifier





1. 请求过来, 
2. 请求过路由. 
3. 处理请求. (如果是view得转接)







<mirror>
  <id>alimaven</id>
  <name>aliyun maven</name>
  <url>http://maven.aliyun.com/nexus/content/groups/public/</url>
  <mirrorOf>central</mirrorOf>        
</mirror>

mvn archetype:generate -DgroupId=company -DartifactId=app -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
















