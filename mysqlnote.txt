GET ALL DATABASE TABLES SIZE:
SELECT 
    table_name AS `Table`, 
    round(((data_length + index_length) / 1024 / 1024), 2) `Size in MB` 
FROM information_schema.TABLES 
WHERE table_schema = "$DB_NAME"
    AND table_name = "$TABLE_NAME";

GET ALL DATABASE SIZE:
SELECT table_schema "Data Base Name", 
sum( data_length + index_length ) / 1024 / 
1024 "Data Base Size in MB", 
sum( data_free )/ 1024 / 1024 "Free Space in MB" 
FROM information_schema.TABLES 
GROUP BY table_schema ; 


show charset;
SELECT SCHEMA_NAME 'database', default_character_set_name 'charset', DEFAULT_COLLATION_NAME 'collation' FROM information_schema.SCHEMATA;


SELECT default_character_set_name FROM information_schema.SCHEMATA S WHERE schema_name = "DBNAME";


SELECT CCSA.character_set_name FROM information_schema.`TABLES` T,information_schema.`COLLATION_CHARACTER_SET_APPLICABILITY` CCSA WHERE CCSA.collation_name = T.table_collation AND T.table_schema = "DBNAME" AND T.table_name = "TABLENAME";


ALTER TABLE tbl_name CONVERT TO CHARACTER SET charset_name;


ALTER TABLE etape_prospection
  CHARACTER SET utf8,
  COLLATE utf8_general_ci;


  | ADD [COLUMN] col_name column_definition


// ALTER DATABASE DBNAME CHARACTER SET utf8 COLLATE utf8_general_ci;


ALTER DATABASE test CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;

SHOW VARIABLES WHERE Variable_name LIKE 'character\_set\_%' OR Variable_name LIKE 'collation%'


java
sudo dpkg -i mysql-connector-java_8.0.12-1debian9_all.deb
/usr/share/java/mysql-connector-java-8.0.12.jar:/usr/share/java/mysql-connector-java-8.0.12.jar:
export CLASSPATH=/path/mysql-connector-java-ver.jar:$CLASSPATH

Never use utf8 in MySQL — always use utf8mb4 instead.



ALTER DATABASE test CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci;
SHOW VARIABLES WHERE Variable_name LIKE 'character\_set\_%' OR Variable_name LIKE 'collation%';
/etc/mysql/my.cnf

!includedir /etc/mysql/conf.d/
!includedir /etc/mysql/mysql.conf.d/

[client]
default-character-set = utf8mb4

[mysql]
default-character-set = utf8mb4

[mysqld]
character-set-client-handshake = FALSE
character-set-server = utf8mb4
collation-server = utf8mb4_general_ci


restart mysql.


# For each database:
ALTER DATABASE database_name CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci;
# For each table:
ALTER TABLE table_name CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
# For each column:
ALTER TABLE table_name CHANGE column_name column_name VARCHAR(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
# (Don’t blindly copy-paste this! The exact statement depends on the column type, maximum length, and other properties. The above line is just an example for a `VARCHAR` column.)


show variables like "max_connections";



ALTER TABLE Animal ADD CONSTRAINT UQ_Animal_AnimalTypeId UNIQUE (AnimalType_id)



CAST(scene_id AS CHAR) scene_id

SHOW ENGINES;
CREATE TABLE t (i INT) ENGINE = MYISAM;




Two-phase locking
Two-phase locking
https://en.wikipedia.org/wiki/Two-phase_locking



Both authors have previously included alternative storage
engines for existing single-node DBMSs in our categorization
of NewSQL systems. The most common examples of these
are replacements for MySQL’s default InnoDB storage engine
(e.g., TokuDB, ScaleDB, Akiban, deepSQL). The advantage
of using a new engine is that an organization can get better
performance without having to change anything in their application and still leverage the DBMS’s existing ecosystem
(e.g., tools, APIs). The most interesting of these was ScaleDB
because it provided transparent sharding underneath the system without using middleware by redistributing execution between storage engines; the company, however, has since pivoted to another problem domain



Managing their own storage also enables a DBMS to employ more sophisticated replication schemes than what is possible with the block-based replication scheme used in HDFS.
In general, it allows these DBMSs to achieve better performance than other systems that are layered on top of other
existing technologies; examples of this include the “SQL on
Hadoop” systems like Trafodion [4] and Splice Machine [16]
that provide transactions on top of Hbase. As such, we believe
that such systems should not be considered NewSQL.



The centralized middleware component routes queries, coordinates transactions, as well as manages data placement, replication, and partitioning across the nodes. There is typically a
shim layer installed on each DBMS node that communicates
with the middleware. This component is responsible for executing queries on behalf of the middleware at its local DBMS
instance and returning results. All together, these allow middleware products to present a single logical database to the
application without needing to modify the underlying DBMS.
The key advantage of using a sharding middleware is that
they are often a drop-in replacement for an application that
is already using an existing single-node DBMS. D


The centralized middleware component routes queries, coordinates transactions, as well as manages data placement, replication, and partitioning across the nodes. There is typically a
shim layer installed on each DBMS node that communicates
with the middleware. This component is responsible for executing queries on behalf of the middleware at its local DBMS
instance and returning results. All together, these allow middleware products to present a single logical database to the
application without needing to modify the underlying DBMS.
The key advantage of using a sharding middleware is that
they are often a drop-in replacement for an application that
is already using an existing single-node DBMS. D



Previous research has shown that the legacy components of disk-oriented architectures is a significant encumbrance that prevents these traditional DBMSs from scaling up to take advantage of higher CPU core counts and larger memory capacities.



Examples: AgilData Scalable Cluster 2
[1], MariaDB MaxScale [10], ScaleArc [15], ScaleBase3


As in most aspects of cloud computing, the largest companies are the major players in the DBaaS field due to the economies of scale. But almost all of the DBaaSs just provide a managed instance of a traditional, single-node DBMS (e.g., MySQL): notable examples include Google Cloud SQL, Microsoft Azure SQL, Rackspace Cloud Database, and Salesforce Heroku. We do not consider these to be NewSQL systems as they use the same underlying disk-oriented DBMSs based on the 1970s architectures. Some vendors, like Microsoft, retro-fitted their DBMS to provide better support for multi-tenant deployments [21].




A query evaluation plan is a tree of relational operators and is executed by calling the operators in some (possibly interleaved) order. 





Consider the following example. Transaction T1 sets an exclusive lock on object A, T2 sets an exclusive lock on B, T1 requests an exclusive lock on B and is queued, and T2 requests an exclusive lock on A and is queued. Now, T1 is waiting for T2 to release its lock and T2 is waiting for T1 to release its lock. Such a cycle of transactions waiting for locks to be released is called a deadlock.



A simple way to identify deadlocks is to use a timeout mechanism. If a trans- action has been waiting too long for a lock, we can a'3sume (pessimistically) that it is in a deadlock cycle and abort it. 



show processlist;
#找到锁进程，kill id ;
kill 10543303



CREATE USER 'liikii'@'%' IDENTIFIED BY 'jmgwdhwb6CoNeRBfsXg';
GRANT ALL ON *.* TO 'liikii'@''@'%'';
FLUSH PRIVILEGES;


CREATE USER 'root'@'' IDENTIFIED BY 'jmgwdhwb6CoNeRBfsXg';
GRANT ALL ON *.* TO 'root'@'192.168.1.125';
FLUSH PRIVILEGES;



 REVOKE ALL PRIVILEGES, GRANT OPTION FROM 'root'@'%';
 DROP USER 'root'@'%';
UPDATE Reservations r JOIN Train t ON (r.Train = t.TrainID)
SET t.Capacity = t.Capacity + r.NoSeats
WHERE r.ReservationID = ?;


UPDATE Reservations r JOIN Train t ON (r.Train = t.TrainID)
SET t.Capacity = t.Capacity + r.NoSeats
WHERE r.ReservationID = ?;


 a left join hx_brand b on a.shopname = b.brand


update hx_shop a left join hx_brand b on a.shopname = b.brand set a.shoppic = concat('https://static.lbadvisor.com/img/HXH', b.logo) where a.note = '05312020'
SELECT * FROM mysql.user;




$ mysql -u root -p -e "SET GLOBAL sql_mode = 'NO_ENGINE_SUBSTITUTION';" 
You can set other values for sql_mode as well. See sysvar sql_mode in the MySQL Documentation for a list.

Then, you can verify that the mode is set by running the following:

$ mysql -u root -p -e "SELECT @@GLOBAL.sql_mode;"


INSERT INTO table2
SELECT * FROM table1
WHERE condition;


INSERT INTO table2
SELECT * FROM table1
WHERE condition;


INSERT INTO table2
SELECT * FROM table1
WHERE condition;


INSERT INTO table2 SELECT * FROM table1


swap column value.
UPDATE swap_test
   SET x=(@temp:=x), x = y, y = @temp

