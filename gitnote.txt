
when conflict with the oneline vision.
git reset --hard commithash
git pull 



and remembers your passphrase.
Generating a new SSH key

    Open Terminal.

    Paste the text below, substituting in your GitHub email address.

    $ ssh-keygen -t rsa -b 4096 -C "your_email@example.com"

    This creates a new ssh key, using the provided email as a label.

    > Generating public/private rsa key pair.

    When you're prompted to "Enter a file in which to save the key," press Enter. This accepts the default file location.

    > Enter a file in which to save the key (/home/you/.ssh/id_rsa): [Press enter]

    At the prompt, type a secure passphrase. For more information, see "Working with SSH key passphrases".

    > Enter passphrase (empty for no passphrase): [Type a passphrase]
    > Enter same passphrase again: [Type passphrase again]

Adding your SSH key to the ssh-agent

Before adding a new SSH key to the ssh-agent to manage your keys, you should have checked for existing SSH keys and generated a new SSH key.

    Start the ssh-agent in the background.

    $ eval "$(ssh-agent -s)"
    > Agent pid 59566

    Add your SSH private key to the ssh-agent. If you created your key with a different name, or if you are adding an existing key that has a different name, replace id_rsa in the command with the name of your private key file.

    $ ssh-add ~/.ssh/id_rsa



ssh config git
4，修改配置文件

若.ssh目录(就是私钥所在的文件夹)下无config文件，那么创建

touch config

在config文件添加以下内容

    # gitlab
    Host github.com
    Port 22
    HostName github.com
    PreferredAuthentications publickey
    IdentityFile C:/Users/xiaohaozi/.ssh/github-rsa
    User xiaohaozi
     
    # smartgit
    Host smartgit
    HostName smartgit
    PreferredAuthentications publickey
    IdentityFile C:/Users/xiaohaozi/.ssh/id_rsa
    User xiaohaozi

    # 配置文件参数
    # Host : Host可以看作是一个你要识别的模式，对识别的模式，进行配置对应的的主机名和ssh文件（可以直接填写ip地址）
    # HostName : 要登录主机的主机名（建议与Host一致）
    # User : 登录名（如gitlab的username）
    # IdentityFile : 指明上面User对应的identityFile路径
    # Port: 端口号（如果不是默认22号端口则需要指定）
————————————————
版权声明：本文为CSDN博主「小號子」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/hao495430759/article/details/80673568

5.测试

$ ssh -T git@github.com

 输出
Welcome to GitLab, your name!
则说明成功了。

也可以在自己的github上创建一个project之后，再git bash中gitc clone 一下进行测试。


10123* git remote add awscode https://git-codecommit.us-west-2.amazonaws.com/v1/repos/ai-xj-python-api
10127* git commit -am 'up '


git init
git add filename
git commit -am 'msg'
git remote add origin git@github.com:liikii/notebuk.git
# git remote set-url origin git@github.com:liikii/notebuk.git
git push -u origin master


git checkout --orphan latest_branch
git add -A
git commit -am "commit message"
git branch -D master
git branch -m master
git push -f origin master


git to branch.
git checkout branch


:new a branch from another.
git checkout -b newbranch oldbranch


:get file from other branch.
git checkout otherbranch -- filename

git config -l
git config --global user.name "lii"
git config --global user.email "333@qq.com"
git remote set-url origin git@github.com:liikii/goexample.git
git remote rm origin


git config --global --unset remote.origin.url



http://cim.lbadvisor.com:7211/set_order

'item_count': 1,
'set_id': 51,
'token': "106,0,0,0ce97cb0fb3ce3558945f50b578f4e24995d0c58485bc7aa70bf441128e12519",
'user_id': "106",

git clone -b jike_v2.2 --single-branch https://github.com/chen206/cim.git


select set_id, a.`count`, `desc`, CONVERT(order_id, char) order_id, user_id, a.price, a.order_status, order_time, qc_count, lead_count, b.price set_price, b.placement, a.`count`*b.`lead_count` lead_total_count, a.`count`*b.`qc_count` qc_total_count from xj_order a left join xj_set b using(set_id) where a.user_id = 106

git clone -b a1.1 --single-branch https://github.com/c/d.git


Add these lines to your ~/.bashrc or ~/.bash_profile to force git to display all messages in English:

# Set Git language to English
#alias git='LANG=en_US git'
alias git='LANG=en_GB git'




git branch -d delete_branch
git push --delete <remote_name> <branch_name>


git clone https://github.com/golang/tools.git --config "http.proxy=ssssockkkkksssss5://127.0.0.1:0000"


git check out another remote branch not in local. 
git fetch origin jike_v2.7:jike_v2.7
git fetch origin jike_v2.8:jike_v2.8

git fetch origin jike_v2.8:jike_v2.8

git diff jike_v2.a  jike_v2.b  -- reg_notify.py


git reset --hard xxfasfasdfasdfasdfasdf
git push -f origin master





作者：shede333
主页：http://my.oschina.net/shede333 && http://blog.sina.com.cn/u/1509658847
版权声明：原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | [Creative Commons BY-NC-ND 3.0][]

官网：http://brew.sh/index_zh-cn.html
安装方式见 官网，在shell里执行如下语句，如下：

ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
命令详解：

1.先用 shell命令curl，将文件下载本地，文件名为 install，文件地址：https://raw.githubusercontent.com/Homebrew/install/master/install

2.执行 ruby -e 文件install。

但是 ruby命令里面的内容，是下载github上的Homebrew库，但是这个下载超级慢，怎么办？ 如果你有vpn的话，就有多远就走多远。(直接按照官网的方式下载即可)

我的方法是：
主要思路为，替换brew的镜像源。

1.先把https://raw.githubusercontent.com/Homebrew/install/master/install文件下载下来(使用浏览器打开，另存为也可以)，把文件命名为install.txt

接下来，修改install.txt文件：
应该在第7行左右，(记住这里的原来的url，后面你可能需要还原回来)

HOMEBREW_REPO = 'https://github.com/Homebrew/homebrew'
改为：  
HOMEBREW_REPO = 'git@git.coding.net:homebrew/homebrew.git'
这里就是把Homebrew的 原始镜像 替换为别的镜像（见最下面的参考镜像） 这样就差不多，最后继续执行ruby命令(注意：shell当前路径最好为 install.txt所在路径)

rm -rf /usr/local/Cellar /usr/local/.git && brew cleanup
ruby  install.txt文件的绝对路径
第一行的rm命令，是为了防止之前你安装Homebrew失败而残留的文件，导致这次安装失败
ruby install.txt执行之后，安装命令行提示安装，应该会安装成功。
安装成功后，执行以下命令：

brew doctor
这个命令是Homebrew的自我检测命令，看看有没有配置不对的地方。

由于我们使用别的镜像，所以会提示镜像为认证，如果你觉得不安全，可以把镜像替换为原来的，不过替换会原始镜像，那么brew update可能会很慢，甚至是失败。

下面是修改为原始镜像连接的方法（推荐改为官方URL，因为上面的临时URL将来有可能会失效）

cd /usr/local && git remote set-url origin https://github.com/Homebrew/homebrew
再执行brew doctor看看，应该就没有这个警告了。

完毕！

如有问题，也可私信联系我~

brew的镜像：
https://git.coding.net/homebrew/homebrew.git （coding.net）
本镜像源只镜像了 Homebrew 托管在 Bintray 上的二进制预编译包，所以只对这些二进制包有加速功能（Homebrew 大部分情况下使用该渠道下载安装软件）

refer: Homebrew有别快的源（mirror）吗？ - 程序员 - 知乎


